use crate::ast::*;
use std::str::FromStr;
use lalrpop_util::ParseError;

use crate::*;

grammar<'err>(errors: &'err mut Vec<ParseError<usize, Token<'input>, &'static str>>);

match {
    r#"\"[\w|\d|\s]+\""#,
    r"[0-9]+",
    r"[0-9]+\.[0-9]+",
    r"[a-zA-Z_][a-zA-Z0-9_]*",
    ";",
    ",",
    "(",
    ")",
    "{",
    "}",
    "[",
    "]",
    "+",
    "-",
    "*",
    "/",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "!=",
    "=",
    "fun",
    "import",
    "ret",
    "if",
    "else",
    "while",
    "let",
    "true",
    "false",
    "\"",
    r"//.*" => { },
    r"\s+" => { }
}

pub EzLangSharp: Vec<TopLvl> = {
    TopLvl*,
}

TopLvl: TopLvl = {
    FuncDef,
    // Import
}

FuncDef: TopLvl = {
    <start: @L> "fun" <name: Ident> "(" <args: Comma<Ident>> ")" "{" <body: Block> "}" <end:@R>=> TopLvl::FuncDef(name, args, body, SourceInfo::new(start..end)),
    ! => {
        gen_err!(errors, TopLvl::Error, <>.error)
    }
}

FuncArg: String = {
    <args: Ident> ","? => args,
}

Block: Vec<Stmt> = {
    Stmt*,
}

Stmt: Stmt = {
    <start:@L> "if" <cond: Expr> "{" <body: Block> "}" <elseb: ElseBlock?> <end:@R> => Stmt::If(cond, body, elseb, SourceInfo::new(start..end)),
    <start:@L> "while" <cond: Expr> "{" <body: Block> "}" <end:@R> => Stmt::While(cond, body, SourceInfo::new(start..end)),
    <start:@L> "let" <name: Ident> "=" <expr: Expr> ";" <end:@R> => Stmt::Let(name, expr, SourceInfo::new(start..end)),
    <start:@L> <e: Expr> ";" <end:@R> => Stmt::Expr(e, SourceInfo::new(start..end)),
    <start:@L> "ret" <expr: Expr> ";" <end:@R> => Stmt::Return(expr, SourceInfo::new(start..end)),
    <start:@L> <var: Ident> "=" <val: Expr> ";" <end:@R> => Stmt::Assign(var, val, SourceInfo::new(start..end)),
    ! => {
        gen_err!(errors, Stmt::Error, <>.error)
    }
}

ElseBlock: Vec<Stmt> = {
    "else" "{" <body: Block> "}" => body
}

Term: Expr = {
    FuncCall => <>,
    <start:@L> <lit:Int> <end:@R> => Expr::Int(lit, SourceInfo::new(start..end)),
    <start:@L> <lit:Float> <end:@R> => Expr::Float(lit, SourceInfo::new(start..end)),
    <start:@L> <lit:Ident> <end:@R> => Expr::Ident(lit, SourceInfo::new(start..end)),
    <start:@L> <lit:ArrayLit> <end:@R> => Expr::ArrayLit(lit, SourceInfo::new(start..end)),
    <start:@L> <lit:StringLit> <end:@R> => Expr::StringLit(lit, SourceInfo::new(start..end)),
    <start:@L> <lit:Bool> <end:@R> => Expr::BoolLit(lit, SourceInfo::new(start..end)),
    "(" <expr: Expr> ")" => expr,
}

Factor: Expr = {
    <term: Term> => term,
    <start:@L> <term: Term> "*" <factor: Factor> <end:@R> => Expr::BinOp(Box::new(term), BinOp::Mul, Box::new(factor), SourceInfo::new(start..end)),
    <start:@L> <term: Term> "/" <factor: Factor> <end:@R> => Expr::BinOp(Box::new(term), BinOp::Div, Box::new(factor), SourceInfo::new(start..end)),
}

AddSub: Expr = {
    <factor: Factor> => factor,
    <start:@L> <factor: Factor> "+" <addsub: AddSub> <end:@R> => Expr::BinOp(Box::new(factor), BinOp::Add, Box::new(addsub), SourceInfo::new(start..end)),
    <start:@L> <factor: Factor> "-" <addsub: AddSub> <end:@R> => Expr::BinOp(Box::new(factor), BinOp::Sub, Box::new(addsub), SourceInfo::new(start..end)),
}

pub Expr: Expr = {
    <addsub: AddSub> => addsub,
    <start:@L> <addsub: AddSub> "<" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Lt, Box::new(expr), SourceInfo::new(start..end)),
    <start:@L> <addsub: AddSub> ">" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Gt, Box::new(expr), SourceInfo::new(start..end)),
    <start:@L> <addsub: AddSub> "<=" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Le, Box::new(expr), SourceInfo::new(start..end)),
    <start:@L> <addsub: AddSub> ">=" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Ge, Box::new(expr), SourceInfo::new(start..end)),
    <start:@L> <addsub: AddSub> "==" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Eq, Box::new(expr), SourceInfo::new(start..end)),
    <start:@L> <addsub: AddSub> "!=" <expr: Expr> <end:@R> => Expr::BinOp(Box::new(addsub), BinOp::Ne, Box::new(expr), SourceInfo::new(start..end)),
    ! => {
        gen_err!(errors, Expr::Error, <>.error)
    }
}

Int: i64 = r"[0-9]+" => i64::from_str_radix(<>, 10).unwrap();
Float: f64 = r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap();
Ident: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();
ArrayLit: Vec<Expr> = {
    "[" <exprs: Comma<Expr>> "]" => exprs
}
Bool: bool = {
    "true" => true,
    "false" => false
}

StringLit: String = {
    r#"\"[\w|\d|\s]+\""# => {
        let mut s = <>.to_string();
        s.remove(0);
        s.pop();
        s
    }
}
FuncCall: Expr = {
    <start:@L> <name: Ident> "(" <args: Comma<Expr>> ")" <end:@R> => Expr::Call(name, args, SourceInfo::new(start..end))
}

Comma<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};
